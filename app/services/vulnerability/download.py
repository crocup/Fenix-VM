from app.core.config import DATABASE_IP, DATABASE_PORT
from app.core.vulnerability import AbctactDownloadVulnerabitity, result_download_vulnerability
from app.services.database import MessageProducer, MongoDriver
import requests


class NVDNistFeeds(AbctactDownloadVulnerabitity):

    def send_db(self):
        pass

    def download_feeds(self):
        while self.start <= self.end:
            if not self.check_new_feeds(self.start):
                print(False)
                """
                если нет таокго хэша, тогда скачиваем, если есть то пропускаем
                """
            self.start += 1

    def check_new_feeds(self, year):
        """
        проверка хэша в БД. Если его нет, то записывается
        return: Bool
        """
        url = f"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-{year}.meta"
        r = requests.get(url)
        result = r.text.split(":")
        hash_elem = result[-1]
        hash_elem = hash_elem.replace("\n", "").replace("\r", "")
        if not self.check_hash(hash_elem):
            self.send_hash_db(year, hash_elem)
            return False
        return True

    def check_hash(self, hash_element):
        nvd_hash = MessageProducer(MongoDriver(host=DATABASE_IP, port=DATABASE_PORT,
                                               base="Vulnerability", collection="NVD_HASH"))
        return nvd_hash.get_count_doc({"hash": hash_element})

    def send_hash_db(self, year, hash_elem):
        nvd_hash = MessageProducer(MongoDriver(host=DATABASE_IP, port=DATABASE_PORT,
                                               base="Vulnerability", collection="NVD_HASH"))
        message = {"year": year, "hash": hash_elem}
        new_message = {"hash": hash_elem}
        nvd_hash.update_message(message, new_message)


class CVEMitreFeeds(AbctactDownloadVulnerabitity):

    def send_db(self):
        pass

    def download_feeds(self):
        pass

    def check_new_feeds(self):
        pass


result_download_vulnerability(NVDNistFeeds(start=2002, end=2021))
